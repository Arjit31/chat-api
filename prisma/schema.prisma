// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  broadcasts       BroadcastMessage[]
  sentMessages     PersonalMessage[]  @relation("SentMessages")
  receivedMessages PersonalMessage[]  @relation("ReceivedMessages")
  tokens           Token[]

  contactsUser1     UserContact[] @relation("ContactUser1")
  contactsUser2  UserContact[] @relation("ContactUser2")
}

model Token {
  id                    String  @id @default(uuid())
  refreshTokenId        String  @unique
  connectionTokenId     String  @unique
  isUsedConnectionToken Boolean
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BroadcastMessage {
  id        String      @id @default(cuid())
  serialNo  Int         @default(autoincrement())
  randomNo  Int
  text      String
  type      MessageType
  createdAt DateTime    @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model PersonalMessage {
  id        String   @id @default(cuid())
  text      String
  serialNo  Int      @default(autoincrement())
  createdAt DateTime @default(now())

  fromUser   User   @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String

  toUser   User   @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId String

  contact    UserContact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId  String?
}

model UserContact {
  id        String @id @default(uuid())
  userId1   String
  userId2   String
  createdAt DateTime @default(now())
  
  adder   User @relation("ContactUser1", fields: [userId1], references: [id], onDelete: Cascade)
  contact User @relation("ContactUser2", fields: [userId2], references: [id], onDelete: Cascade)
  messages PersonalMessage[]

  @@unique([userId1, userId2])
  @@index([userId1])
  @@index([userId2])
}

enum MessageType {
  Anonymous
  Reveal
}
